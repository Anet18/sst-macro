
digraph { 

nic0,nic1,nic2,nic3,nic5,nic6,nic7,nic8,
mpi0,mpi1,mpi2,mpi3,mpi4,mpi5,mpi6,mpi8,
node0,node1,node2,node4,node7,node8,
os0,os1,os2,os3,os4,os5,os6,os7,os8,
des1,des2,des5,
thr13,thr14,thr15,thr16,thr17
[style=invis];

thr10 [style=filled,fillcolor="lightblue",label="App Source\nMPI_Send(...)"];
thr11 [style=filled,fillcolor="lightblue",label="mpi_api::send(...):\nm = new mpi_message(...);\los->execute_kernel(COMM_SEND,m);\lblock();\l"];
thr12 [style=filled,fillcolor="lightblue",label="os::execute_kernel(COMM_FUNC f, event* ev):\l  node_->execute_kernel(f,ev);\l"]
node3 [label="node::execute_kernel(COMM_FUNC f, event* ev):\l  timestamp arrive = now() + lat;\l  schedule(arrive,nic,ev);\l"]
nic4  [label="nic::send(network_message* msg):\l  list<event*> pkts = packetize(msg);\l  for (pkt : pkts)\l  schedule(arrive,router,pkt);}\l  schedule(arrive,node,ack);\l"]
node5 [label="node::handle(event* ev):\nos->handle_event(ev);"]
node6 [label="os::handle_event(event* ev):\nlibrary* lib = libs[ev->lib_name()];\llib->incoming_event(ev);\l"]
mpi7  [label="sumi_server::incoming_event(event* ev):\nmpi_message* msg = dynamic_cast(ev);\lif(msg->is_ack()){\l  mpi_api* api = local_procs[msg->sender()];\l  api->incoming_ack(msg);\l  api->unblock();\l}\l"]
thr18 [style=filled,fillcolor="lightblue",label=" -> mpi_api::send(...)"];




edge[style=invis];
node0->node1->node2->node3->node4->node5->node6->node7->node8;
nic0->nic1->nic2->nic3->nic4->nic5->nic6->nic7->nic8;
thr10->thr11->thr12->thr13->thr14->thr15->thr16->thr17->thr18;
mpi0->mpi1->mpi2->mpi3->mpi4->mpi5->mpi6->mpi7->mpi8;


edge[style=solid];
thr10->thr11 [label="Redirected Function Call\nos::current_thread()->get_api<mpi_api>()->send(...)"];
thr11->thr12 [label="Function\nCall"];
thr12->node3 [label="Schedule + \nContext Switch"];
node3->nic4 [label="Schedule"];
nic4->node5 [label="Schedule"];
node5->node6 [label="Function\nCall"];
node6->mpi7 [label="Function\nCall"];
mpi7->thr18 [label="Context Switch"];

}

