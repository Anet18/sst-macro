/** \page page_BasicMPITutorial Basic MPI Program
<!-- !TEX root = manual.tex-->

\section sec_tutorial_basicmpi Basic MPI Program
Let us go back to the simple send/recv skeleton and actually look at the code.  

\code{.cpp}

#include <stdlib.h>
#include <stdio.h>
#include <sstmac/sstmpi.h>
#include <sstmac/util.h>

int user_skeleton_main(int argc, char **argv) 
{
    int message_size = 128;
    int me, nproc;
    int tag = 0;
    int dst = 1;
    int src = 0;
    MPI_Status stat;

    MPI_Init(&argc,&argv);
    MPI_Comm world = MPI_COMM_WORLD;
    MPI_Comm_rank(world,&me);
    MPI_Comm_size(world,&nproc);

\endcode
The starting point is creating a main routine for the application, which should be named <tt>user_skeleton_main</tt>.
When SST/macro launches, it will invoke this routine and pass in any command line arguments specified via the <tt>launch_app1_argv</tt> parameter.  Upon entering the main routine, 
the code is now indistinguishable from regular MPI C code.  
In the parameter file to be used with the simulation, you must set

\code{.sh}

launch_app1 = user_mpiapp_c

\endcode
or, if compiling as C++

\code{.sh}

launch_app1 = user_mpiapp_cxx

\endcode

At the very top of the file, the SST/macro header files must be included.  
This header provides the MPI API and configures MPI function calls to link to SST/macro instead of the real MPI library.  
In most cases, only <tt>sstmpi.h</tt> will be needed, but <tt>util.h</tt> contains utility functions that may be useful. 
If trying to maintain code as "single-source'' compilable without modification for both SST/macro and actual MPI, we recommend creating a <tt>parallel.h</tt>.

\code{.cpp}

#ifdef SSTMACRO
#include <sstmac/sstmpi.h>
#include <sstmac/util.h>
#define USER_MAIN user_skeleton_main
#else
#include <mpi.h>
#define USER_MAIN main
#endif

\endcode
This creates a central point for swapping back and forth.  
The beginning of the file would then become

\code{.cpp}

#include <stdlib.h>
#include <stdio.h>
#include <parallel.h>

int USER_MAIN(int argc, char **argv) 
{

\endcode

The end of the file is again just regular MPI C code:

\code{.cpp}

    if (nproc != 2) {
        fprintf(stderr, "sendrecv only runs with two processors\n");
        abort();
    }
    if (me == 0) {
        MPI_Send(NULL, message_size, MPI_INT, dst, tag, world);
        printf("rank %i sending a message\n", me);
    }
    else {
        MPI_Recv(NULL, message_size, MPI_INT, src, tag, world, &stat);
        printf("rank %i receiving a message\n", me);
    }
    MPI_Finalize();
    return 0;
}

\endcode
Here the code just checks the MPI rank and sends (rank 0) or receives (rank 1) a message.

*/