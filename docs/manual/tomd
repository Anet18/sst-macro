#! /usr/bin/env python

import glob
import sys
import re
import os

section_template = r'\\begin{%s}(.*?)\\end{%s}'
input_regexp = r'\\input{(.*?)}'
comment_regexp = re.compile(r'%(.*)')

section = 1
subsection = 1
subsubsection = 1 
chapter = 1

refs = {
}

figureCount = 1

def macro_regexp(x, n=1):
  retext = r'\\%s{(.*?)[}]+' % x
  for i in range(1,n):
    retext += '{(.*?)}'
  return re.compile(retext, re.DOTALL)

def labeled_macro_regexp(x):
  retext = r'\\%s{(.*?)}\s*\\label{(.*?)}' % x
  return re.compile(retext)

def optmacro_regexp(x):
  retext = r'\\%s\s*\[(.*?)\]\s*{(.*?)[}]+' % x
  return re.compile(retext, re.DOTALL)

def section_regexp(x):
  return re.compile(section_template % (x,x), re.DOTALL)


paragraph_split_cleanup_regexp = re.compile(r'\n[\t ]*\n')
def process_paragraphs(text):
  par_arr = []
  for paragraph in text.split("\n\n"):
    paragraph = paragraph.strip()
    if "```" in paragraph or "-  " in paragraph:
      par_arr.append(paragraph)
    else:
      str_arr = []
      for line in paragraph.splitlines():
        line = line.strip()
        str_arr.append(line)
      paragraph = " ".join(str_arr)
      par_arr.append(paragraph)
  return "\n\n".join(par_arr)

def process_itemize(match):
  items = match.groups()[0].split(r'\item')
  str_arr = [""]
  for item in items[1:]:
    item = item.strip()
    str_arr.append("-   %s" % item)
  return "\n".join(str_arr)

include_fig_optargs_regexp = optmacro_regexp("includegraphics")
include_fig_regexp = macro_regexp("includegraphics")
def get_figure_text(label, caption, text):
  fname = include_fig_regexp.search(text)
  if not fname:
    fname = include_fig_optargs_regexp.search(text)
    if not fname:
      print text
      sys.exit("failed parsing figure")
    else:
      fname = fname.groups()[1]
  else:
    fname = match.groups()[0]
  
  labelText = ""
  if label:
    labelText = '<a name="%s"></a>'

  return "![%s](%s) %s" % (caption, fname, labelText)

def process_title_pic(match):
  text = match.groups()[0] + "}"
  return get_figure_text(None, "", text)

label_regexp = macro_regexp("label")
caption_regexp = macro_regexp("caption")

doProcessFile = None

def repl_section_header(match, sectionType, count):
  global chapter, section, subsection, subsubsection
  prefix = '#' * count
  name = ""
  ref = ""
  if sectionType == "chapter":
    name = "Chapter %d" % chapter
    ref = "%d" % chapter
    chapter += 1
  elif sectionType == "section":
    ref = "%d.%d" % (chapter, section)
    name = "Section %s" % ref
    section += 1
  elif sectionType == "subsection":
    ref = "%d.%d.%d" % (chapter, section, subsection)
    name = ""
    subsection += 1
  elif sectionType == "subsubsection":
    ref = "%d.%d.%d.%d" % (chapter, section, subsection, subsubsection)
    name = ""
    subsubsection += 1
  if len(match.groups()) == 2: #labeled
    header, label = match.groups()
    sys.stderr.write("%s %s\n" % (header, count))
    refs[label] = ref
    return '%s %s: %s <a name="%s"></a>\n\n' % (prefix, name, header, label)
  else:
    header = match.groups()[0]
    sys.stderr.write("%s %s\n" % (header, count))
    return "%s %s: %s\n\n" % (prefix, name, header)

def process_figure(match):
  global figureCount
  text = match.groups()[0]

  next_fig_id = figureCount
  figureCount += 1

  label = label_regexp.search(text)
  if label: 
    label = label.groups()[0].strip()
    refs[label] = "%d" % next_fig_id
  
  caption = caption_regexp.search(text)

  if caption: 
    caption = "Figure %d: %s" % (next_fig_id, caption.groups()[0])
  else:
    caption = "Figure %d" % next_fig_id

    
  return get_figure_text(label, caption, text)


def delete_comment(x):
  return ""

def return_code(x):
  return '`%s`' % x.groups()[0]

def process_ref(match):
  try:
    label = match.groups()[0]
    return "[%s](#%s)" % (refs[label], label)
  except KeyError:
    return ""

def process_input(match):
  fname = match.groups()[0] + ".tex"
  text = doProcessFile(fname)
  return text

def repl_code_block(match):
  oldBlock = match.groups()[0].strip()
  newBlock = "\n".join(oldBlock.splitlines())
  repl = "````\n%s\n````" % newBlock
  return repl


def return_self(match):
  return match.groups()[0]

def labeled_header_pair(sectionName, count):
  return (labeled_macro_regexp(sectionName), lambda x: repl_section_header(x, sectionName, count))

def header_pair(sectionName, count):
  return (macro_regexp(sectionName), lambda x: repl_section_header(x, sectionName, count))

repls = [
  (section_regexp("CppCode")  , repl_code_block),
  (section_regexp("ShellCmd") , repl_code_block),
  (section_regexp("ViFile")   , repl_code_block),
  (section_regexp("figure")   , process_figure),
  (section_regexp("itemize")   , process_itemize),
  labeled_header_pair('subsubsection', 5),
  header_pair('subsubsection', 5),
  labeled_header_pair('subsection', 4),
  header_pair('subsection', 4),
  labeled_header_pair('section', 3),
  header_pair('section', 3),
  labeled_header_pair('chapter', 2),
  header_pair('chapter', 2),
  (paragraph_split_cleanup_regexp , "\n\n"),
  (macro_regexp('title') , lambda x: repl_section_header(x, "Overview", 1)),
  (macro_regexp('input') , process_input),
  (macro_regexp('aside') , return_self),
  (macro_regexp('titlepic') , process_title_pic),
  (macro_regexp('inlineshell') , return_code),
  (macro_regexp('inlinecode') , return_code),
  (macro_regexp('inlinefile') , return_code),
  (macro_regexp('func') , return_code),
  (macro_regexp('author') , ""),
  (r'\sstmacro' , 'SST-macro'),
  (r'\maketitle' , ''),
  (r'\begin{document}' , ''),
  (r'\end{document}' , ''),
]


def processFile(f):
  text = open(f).read()
  text = comment_regexp.sub("", text)
  for matcher, repl in repls:
    if isinstance(matcher, str):
      text = text.replace(matcher, repl)
    else:
      text = matcher.sub(repl, text)
  return text
doProcessFile = processFile


startFile = sys.argv[1]

text = processFile(startFile)
text = macro_regexp('ref').sub(process_ref, text)
text = process_paragraphs(text)
print text


