#! /usr/bin/env python

import re
import os

toconvert = [
"Introduction",
"Building",
]
top_level_files = toconvert[:]
top_level_files.append("Tutorials")

tutorials = [
"GuiTutorial",
"ParamsTutorial",
"BasicMPITutorial",
"SimpTutorial",
"NetworkTutorial",
"DesTutorial",
"NetworkModelTutorial",
"LaunchTutorial",
"DumpiTutorial",
"CallGraphTutorial",
"SpyPlotTutorial",
"FTQTutorial",
]

allfiles = top_level_files[:] ; allfiles.extend(tutorials)
toconvert.extend(tutorials)

page_names = {}
page_titles = {}
labels = {}
greek = [ 'mu', 'nu' ]

def simple_repl_fxn(tag,x):
    return "<%s>%s</%s>" % (tag, x, tag)
def simple_repl(tag):
    return lambda x: simple_repl_fxn(tag, x)

figures = {}
refs = {
    "Figure" : figures,
}

def caption_repl_fxn(figtype, label_map, match):
    ignore, caption, label = match.groups()
    fignum = len(label_map) + 1
    if label_map.has_key(label):
        #oops, already have this
        fignum = label_map[label]
    else:
        label_map[label] = fignum
    return "<b>%s %d:</b> %s" % (figtype, fignum, caption)
def labeled_elem_regexp(elem):
    return re.compile(r'\\(%s)[{](.*?)[}].*?\\label[{](.*?)[}]' % elem, re.DOTALL)
caption_regexp = labeled_elem_regexp("caption")
def caption_repl(figtype, label_map):
    return lambda x: caption_repl_fxn(figtype, label_map, x)
figure_caption_repl = caption_repl("Figure", figures)

itemize_repl = lambda x: "<ul>\n%s\n</ul>" % (x.replace(r'\item', '<li>'))

floats = {
    'figure' : lambda x: "<br>\n%s\n<br><br>" % caption_regexp.sub(figure_caption_repl, x),
}

environments = {
    'center' : lambda x: x,
    'itemize' : itemize_repl,
    'subItemize' : itemize_repl,
    'CppCode' : lambda x: '\code{.cpp}\n%s\n\endcode' % x,
    'ViFile' : lambda x: '\code{.sh}\n%s\n\endcode' % x,
    'ShellCmd' : lambda x: '\code{.sh}\n%s\n\endcode' % x,
}

replacements = {
    r'\centering' : '',
    r'\sstmacro' : "SST/macro",
    r'$\rightarrow$' : '&rarr;',
    r'\eg' : 'e.g.',
    r'\mytilde' : '~',
    '$X$' : 'X',
    '$Y$' : 'Y',
    r'$<$' : '<',
    r'$>$' : '>',
    '``' : '"',
}


italic_repl = simple_repl("i")
tt_repl = simple_repl("tt")
def null_repl(x):
    return x

macros = {
    "textit" : italic_repl,
    "folder" : italic_repl,
    "emph" : italic_repl,
    "class" : italic_repl,
    "func" : tt_repl,
    "guikey" : tt_repl,
    "inlinefile" : tt_repl,
    "inlineshell" : tt_repl,
    "inlinecode" : tt_repl,
    "url" : (lambda x: '<a href="%s">%s</a>' % (x,x)),
    "ref" : lambda x: r'\ref %s' % x.replace(":","_")
}

multiline_macros = {
    "aside" : null_repl,
}

def figure_ref_repl_fxn(match, label_map):
    reftype, label = match.groups()
    return "%s %d" % (reftype, label_map[label]) 
def figure_ref_repl(label_map):
    return lambda x: figure_ref_repl_fxn(x, label_map)

def comment_repl(match):
    comment = match.groups()[0]
    return "<!--%s-->" % comment

def image_repl(match):
    fname = match.groups()[0]
    root = fname.split(".")[0]
    return '\image html %s.png' % root

def section_repl(match):
    sectype, title, label = match.groups()
    return r'\%s %s %s' % (sectype, label.replace(":","_"), title)

def chapter_repl(filename, match):
    sectype, title, label = match.groups()
    page_titles[filename] = title
    return r'/** \page page_%s %s' % (filename, title)

def section_ref_cleanup(match):
    reftype, label = match.groups()
    if not label in labels:
        return "in the PDF manual"
    else:
        return r'%s \ref %s' % (reftype, label) 

def only_ref_cleanup(match):
    label = match.groups()[0]
    if not label in labels:
        return "in the PDF manual"
    else:
        return r'\ref %s' % (label) 

def math_cleanup(match):
    return match.groups()[0]

def get_doxy_title(doxy_text, sectype):
    retext = r'[\\]%s' % sectype + '\s+[a-zA-Z_]+\s+(.*)'
    regexp = re.compile(retext)
    return regexp.search(doxy_text).groups()[0]

#get a list of all labels
for f in allfiles:
    texfile = "%s.tex" % f
    text = open(texfile).read()
    matches = re.compile(r'\label[{](.*?)[}]').findall(text)
    page_names[f] = matches[0].replace(":","_")
    for m in matches:
        doxy_label = m.replace(":","_")
        labels[doxy_label] = 1

for f in toconvert:
    texfile = "%s.tex" % f
    text = open(texfile).read()


    for flt in floats:
        flt_fxn = floats[flt]
        float_modifier = r'[\[]?[htbH]?[!]?[\]]?'
        regexp = re.compile(r'\\begin[{]%s[}]%s(.*?)\\end[{]%s[}]' % (flt, float_modifier, flt), re.DOTALL)
        text = regexp.sub(lambda x: flt_fxn(x.groups()[0]), text)

    for env in environments:
        env_fxn = environments[env]
        regexp = re.compile(r'\\begin[{]%s[}](.*?)\\end[{]%s[}]' % (env, env), re.DOTALL)
        #env_fxn = eval("%s_repl" % env)
        text = regexp.sub(lambda x: env_fxn(x.groups()[0]), text)

    for ref in refs:
        label_map = refs[ref]
        regexp = re.compile(r'(%s) \\ref[{](.*?)[}]' % ref)
        repl_fxn = figure_ref_repl(label_map)
        text = regexp.sub(repl_fxn, text)

    for m in macros:
        macrofxn = macros[m]
        regexp = re.compile(r'\\%s[{](.*?)[}]' % m)
        replfxn = lambda x: macrofxn(x.groups()[0])
        text = regexp.sub(replfxn, text)

    for m in multiline_macros:
        macrofxn = multiline_macros[m]
        regexp = re.compile(r'\\%s[{](.*?)[}]' % m, re.DOTALL)
        replfxn = lambda x: macrofxn(x.groups()[0])
        text = regexp.sub(replfxn, text)

    image_regexp = re.compile(r'\\includegraphics.*?[{](.*?)[}]')
    text = image_regexp.sub(image_repl, text)

    for sectype in "section", "subsection", "subsubsection":
        regexp = labeled_elem_regexp(sectype)
        text = regexp.sub(section_repl, text)

    #do the chapter repl
    regexp = labeled_elem_regexp("chapter")
    text = regexp.sub(lambda x: chapter_repl(f, x), text)

    comment_regexp = re.compile('[%][%](.*)')
    text = comment_regexp.sub(comment_repl, text)

    for letter in greek:
        latex = r'$\%s$' % letter
        doxy = '&%s;' % letter
        text = text.replace(latex, doxy)
        latex = r'\%s' % letter
        text = text.replace(latex, doxy)

    for latex in replacements:
        doxy = replacements[latex]
        text = text.replace(latex, doxy)

    #clean up any hanging refs
    regexp = re.compile('([a-zA-Z]+)\s+' + r'\\ref' + '\s+([a-zA-Z_]+)')
    text = regexp.sub(section_ref_cleanup, text)

    regexp = re.compile(r'\\ref' + '\s+([a-zA-Z_]+)')
    text = regexp.sub(only_ref_cleanup, text)

    #clean up equations
    regexp = re.compile("[$](.*?\d+.*?)[$]")
    text = regexp.sub(math_cleanup, text)
    
    doxfile = "%s.dox" % f
    fobj = open(doxfile, "w")
    if f in tutorials:
        title = get_doxy_title(text, "section")
        page_titles[f] = title
        fobj.write(r'/** \page page_%s %s' % (f,title))
        fobj.write("\n")
    fobj.write(text)
    fobj.write("\n*/") #close it off
    

header = """
/** \mainpage SST/macro: The Structural Simulation Toolkit Macroscale Components

The SST/macro software package provides a simulator for large-scale parallel computer architectures. It permits the coarse-grained study of distributed-memory applications. The simulator is driven from either a trace file or a skeleton application. The simulator architecture is modular, allowing it to easily be extended with additional network models, 
trace file formats, programming models, and more detailed processor models.
<ul>
"""
footer = """</ul>
*/
"""
fobj = open("sstmacro.dox","w")
fobj.write(header)
for fname in top_level_files:
    fobj.write('<li> \\ref page_%s\n' % fname)
fobj.write('<li> \\ref keywords\n')
fobj.write(footer)
fobj.close()

header = """
/** \page page_Tutorials Tutorials

<ul>
"""
footer = """</ul>
*/
"""
fobj = open("Tutorials.dox","w")
fobj.write(header)
for fname in tutorials:
    section_name = page_names[fname]
    title = page_titles[fname]
    fobj.write('<li> \\ref page_%s\n' % (fname))
fobj.write(footer)
fobj.close()



