
template <class T>
struct A {
 T& getX(){ char* sstmac_global_data = get_sstmac_global_data();T* sstmac_x=(T*)(sstmac_global_data + __offset_x); {
  return (*sstmac_x);
  }}
 static T x; public: static int __offset_x;
 void fxn(){ char* sstmac_global_data = get_sstmac_global_data();T* sstmac_x=(T*)(sstmac_global_data + __offset_x); {
  (*sstmac_x) -= 1;
  }}
 T& getXagain(){ char* sstmac_global_data = get_sstmac_global_data();T* sstmac_x=(T*)(sstmac_global_data + __offset_x); {
  return (*sstmac_x);
  }}
};
template <class T> T A<T>::x = 5;template <class T> int A<T>::__offset_x = sstmac::inplace_cpp_global<A<T>,T>(false,5);

namespace ns {
template <class T, class U>
struct B {
 static int x; public: static int __offset_x;
};
template <class T, class U> int B<T,U>::x(42);template <class T,class U> int B<T,U>::__offset_x = sstmac::inplace_cpp_global<B<T,U>,int>(false,42);
}

template <class T, const char* tag>
class C {
 static int value; public: static int __offset_value;
 static T anotherValue; public: static int __offset_anotherValue;
};

template <class T, const char* tag> int C<T,tag>::value;template <class T,const char * tag> int C<T,tag>::__offset_value = sstmac::inplace_cpp_global<C<T,tag>,int>(false);
template <class T, const char* tag> T C<T,tag>::anotherValue;template <class T,const char * tag> int C<T,tag>::__offset_anotherValue = sstmac::inplace_cpp_global<C<T,tag>,T>(false);

class E {};

template <typename>
class D {
  static int var; public: static int __offset_var;
  static E e; public: static int __offset_e;
};
template <class T> int D<T>::var;template <class T> int D<T>::__offset_var = sstmac::inplace_cpp_global<D<T>,int>(false);
template <class T> E D<T>::e = {};template <class T> int D<T>::__offset_e = sstmac::inplace_cpp_global<D<T>,class E>(false);
#include <sstmac/software/process/global.h>

