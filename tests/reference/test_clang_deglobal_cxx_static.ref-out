
extern int sstmac_global_stacksize; extern "C" void sstmac_init_global_space(void*,int,int); extern int __offset___Ax; struct A {
 static int x;static inline void* get___Ax(){  int stack; int* stackPtr = &stack;  uintptr_t localStorage = ((uintptr_t) stackPtr/sstmac_global_stacksize)*sstmac_global_stacksize;  char** globalMapPtr = (char**)(localStorage+sizeof(int));  char* offsetPtr = *globalMapPtr + __offset___Ax;return (void*)offsetPtr; }  
 void fxn(){
  (*((int*)A::get___Ax())) -= 1;
 }
};

extern int sstmac_global_stacksize; extern "C" void sstmac_init_global_space(void*,int,int); extern int __offset___Bx; extern int sstmac_global_stacksize; extern "C" void sstmac_init_global_space(void*,int,int); extern int __offset___Cx; namespace ns {
struct B {
 static int x;static inline void* get___Bx(){  int stack; int* stackPtr = &stack;  uintptr_t localStorage = ((uintptr_t) stackPtr/sstmac_global_stacksize)*sstmac_global_stacksize;  char** globalMapPtr = (char**)(localStorage+sizeof(int));  char* offsetPtr = *globalMapPtr + __offset___Bx;return (void*)offsetPtr; }  
};
namespace ns2 {
 struct C {
  static int x;static inline void* get___Cx(){  int stack; int* stackPtr = &stack;  uintptr_t localStorage = ((uintptr_t) stackPtr/sstmac_global_stacksize)*sstmac_global_stacksize;  char** globalMapPtr = (char**)(localStorage+sizeof(int));  char* offsetPtr = *globalMapPtr + __offset___Cx;return (void*)offsetPtr; }  
 };
}
}

int ns::B::x = 42;namespace ns {void* __ptr___Bx = &B::x; int __sizeof___Bx = sizeof(B::x);}
int A::x = 5;void* __ptr___Ax = &A::x; int __sizeof___Ax = sizeof(A::x);
namespace ns {
 namespace ns2 {
  int C::x = 10;void* __ptr___Cx = &C::x; int __sizeof___Cx = sizeof(C::x);
 }
}

void fxn()
{
  (*((int*)::ns::B::get___Bx())) += 1;
  (*((int*)::ns::ns2::C::get___Cx())) -= 3;
  (*((int*)A::get___Ax())) = 10;
};
#include <sstmac/software/process/global.h>

int __offset___Ax = 0;
extern int __sizeof___Ax;
extern void* __ptr___Ax;
sstmac::GlobalVariable __gv___Ax(__offset___Ax,__sizeof___Ax,__ptr___Ax);
namespace ns {
 int __offset___Bx = 0;
 extern int __sizeof___Bx;
 extern void* __ptr___Bx;
 sstmac::GlobalVariable __gv___Bx(__offset___Bx,__sizeof___Bx,__ptr___Bx);
 namespace ns2 {
  int __offset___Cx = 0;
  extern int __sizeof___Cx;
  extern void* __ptr___Cx;
  sstmac::GlobalVariable __gv___Cx(__offset___Cx,__sizeof___Cx,__ptr___Cx);
 }
}
