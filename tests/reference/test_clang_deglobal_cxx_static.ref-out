
 extern int __offset___Ax; struct A {
 static int x;
 void fxn(){ char* sstmac_global_data = get_sstmac_global_data();int* sstmac_A____Ax=(int*)(sstmac_global_data + __offset___Ax); {
  (*sstmac_A____Ax) -= 1;
  }}
};

namespace ns {
 extern int __offset___Bx; struct B {
 static int x;
};
namespace ns2 {
  extern int __offset___Cx; struct C {
  static int x;
 };
}
}

int ns::B::x = 42;namespace ns {void* __ptr___Bx = &B::x; int __sizeof___Bx = sizeof(B::x);}
int A::x = 5;void* __ptr___Ax = &A::x; int __sizeof___Ax = sizeof(A::x);
namespace ns {
 namespace ns2 {
  int C::x = 10;void* __ptr___Cx = &C::x; int __sizeof___Cx = sizeof(C::x);
 }
}

void fxn()
{ char* sstmac_global_data = get_sstmac_global_data();int* sstmac_A____Ax=(int*)(sstmac_global_data + __offset___Ax); int* sstmac___ns__B____Bx=(int*)(sstmac_global_data + ::ns::__offset___Bx); int* sstmac___ns__ns2__C____Cx=(int*)(sstmac_global_data + ::ns::ns2::__offset___Cx); {
  (*sstmac___ns__B____Bx) += 1;
  (*sstmac___ns__ns2__C____Cx) -= 3;
  (*sstmac_A____Ax) = 10;
 }};
#include <sstmac/software/process/global.h>

int __offset___Ax = 0;
extern int __sizeof___Ax;
extern void* __ptr___Ax;
sstmac::GlobalVariable __gv___Ax(__offset___Ax,__sizeof___Ax,"__Ax",__ptr___Ax,false);
namespace ns {
 int __offset___Bx = 0;
 extern int __sizeof___Bx;
 extern void* __ptr___Bx;
 sstmac::GlobalVariable __gv___Bx(__offset___Bx,__sizeof___Bx,"__Bx",__ptr___Bx,false);
 namespace ns2 {
  int __offset___Cx = 0;
  extern int __sizeof___Cx;
  extern void* __ptr___Cx;
  sstmac::GlobalVariable __gv___Cx(__offset___Cx,__sizeof___Cx,"__Cx",__ptr___Cx,false);
 }
}
