template <class T>
struct vector {
 vector() : size_(0), storage_(nullptr){}

 void resize(int size){
  if (size != size_){
    conditional_delete_array<T>(this->storage_);
    storage_ = conditional_array_new<T>(size);
    size_ = size;
  }
 }

 int size() const {
  return size_;
 }

 void null_fxn() {
 }

 T& operator[](int idx){
  return storage_[idx];
 }

 T* storage_;
 int size_;
};



int fxn()
{
 should_skip_operator_new()++;vector<double> vec;should_skip_operator_new()--;
  should_skip_operator_new()++;vec.resize(100);should_skip_operator_new()--;

  ;

  int n = vec.size();

 { uint64_t flops=0; uint64_t readBytes=0; uint64_t writeBytes=0; uint64_t intops=0; {  uint64_t tripCount0=(((vec.size())-(0)));  flops += tripCount0*1;}sstmac_compute_detailed(flops,intops,readBytes); /*assume write-through for now*/ }



  return 0;
}
#include <sstmac/software/process/global.h>

