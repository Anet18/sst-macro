#include <sumi-mpi/mpi_protocol/mpi_protocol.h>
#include <sumi-mpi/mpi_queue/mpi_queue.h>
#include <sumi-mpi/mpi_queue/mpi_queue_recv_request.h>
#include <sstmac/software/process/backtrace.h>

namespace sumi {


rendezvous_get::~rendezvous_get()
{
}

void
rendezvous_get::send_header(mpi_queue* queue,
                             const mpi_message::ptr& msg)
{
  SSTMACBacktrace("MPI Rendezvous Protocol: RDMA Send Header");
  msg->set_content_type(mpi_message::header);
  queue->post_header(msg, false); //don't need the nic ack
}

void
rendezvous_get::incoming_header(mpi_queue* queue,
                               const mpi_message::ptr& msg)
{
  SSTMACBacktrace("MPI Rendezvous Protocol: RDMA Handle Header");

  mpi_queue_recv_request* req = queue->find_pending_request(msg);
  if (req) {
    if (req->open_source()) {
      //we have to initialize the recv
      //event* ev = new_event(req, &mpi_queue::recvrequest::handle, msg);
      //init_system_recv(msg->payload_bytes(), queue, ev);
      req->handle(msg);
    }
    else {
      req->handle(msg);
    }
  }
  queue->notify_probes(msg);
}

void
rendezvous_get::incoming_payload(mpi_queue* queue,
                                const mpi_message::ptr& msg)
{
  SSTMACBacktrace("MPI Rendezvous Protocol: RDMA Handle Payload");

  mpi_queue::pending_req_map::iterator it = queue->recv_needs_payload_.find(
        msg->unique_int());
  if (it == queue->recv_needs_payload_.end()) {
    spkt_throw_printf(sprockit::illformed_error,
                     "mpi_queue[%s]: rendezvous_get::handle_payload: "
                     "data message without a matching ack on %s",
                     queue->id_string().c_str(),
                     msg->to_string().c_str());
  }
  mpi_queue_recv_request* recver = it->second;
  queue->recv_needs_payload_.erase(it);
  recver->handle(msg);
}

void
rendezvous_get::finish_recv_header(
  mpi_queue* queue,
  const mpi_message::ptr& msg,
  mpi_queue_recv_request* req
)
{
  SSTMACBacktrace("MPI Rendezvous Protocol: RDMA Recv Header");
  msg->set_needs_send_ack(false);
  msg->set_content_type(mpi_message::data);
  queue->recv_needs_payload_[msg->unique_int()] = req;
  //generate both a send and recv ack
  queue->post_rdma(msg, true, true); 
}

void
rendezvous_get::finish_recv_payload(
  mpi_queue* queue,
  const mpi_message::ptr& msg,
  mpi_queue_recv_request* req
)
{
  //no-op, send ack auto generated by transport layer
}

}

