#!/usr/bin/env python3

'''
Loads output from Infiniband probing command and parses parameters out of the fabric.
```bash
ibnetdiscover > ibnetdiscover-$(date -I).txt
dump_fts -a > dump_fts-$(date -I).txt
```
'''

import argparse
import json
import sys
import re
from pathlib import Path


def read_file(file_name):
    path = Path(file_name)

    if not path.is_file():
        raise Exception(f'file "{path}" does not exist. Check your arguments.')

    with open(path) as f:
        return f.read()


def parse_args():
    """Parses commandline arguments."""
    parser = argparse.ArgumentParser(
        description='Parses reports generated by "dump_fts" into a JSON or YAML dictionary. Each enabled flag will populate out a key')
    parser.add_argument('--dump_fts',
                        help='Output of running "dump_fts" on a node connected to Infiniband')
    parser.add_argument('-r', '--routing_tables', action='store_true',
                        help='Switch routing tables')
    parser.add_argument('--ibnetdiscover',
                        help='Output of running "ibnetdiscover on a node connected to Infiniband"')
    parser.add_argument('--switch_links', action='store_true',
                        help='Print switch links')
    parser.add_argument('-a', '--all', help='The kitchen sink!')

    return parser.parse_args()


def parse_switch_line(line):
    """Try to parse switch info from a line. Parsable line looks like this:
       Unicast lids [0x0-0xfa] of switch DR path slid 0; dlid 0; 0,1,11,31,5 guid 0xe41d2d0300836480 (MF0;switch-mlnx3:SX6036/U1):

       Returns this:
       { 'switch_guid': '0xe41d2d0300836480',
         'switch_name': 'MF0;switch-mlnx3:SX6036/U1'}
       """
    out = re.findall(
        "Unicast lids \[.*\] of switch DR path slid \d+; dlid \d+; [\d,]* guid ([\w\d]+) \((.+)\):", line)
    if out:
        out = out[0]
        return {'switch_guid': out[0], 'switch_name': out[1]}
    return None


def parse_route_line(line):
    """Try to parse route info from a line from dump_fts. Parsable line looks like this:
       0x0002 027 : (Channel Adapter portguid 0xf45214030064b221: 'klogin2 HCA-1')

       Returns this:
       { 'lid': '0002',
         'out_port': '027',
         'portguid': '0xf45214030064b221',
         'dest_name': 'klogin2_HCA-1'}
    """
    out = re.findall(
        """(\d+) (\d+) : \(Channel Adapter portguid (\w+): '(\w+) ([\w-]+)'\)""", line)
    if out:
        out = out[0]
        return {'lid': int(out[0], 16), 'out_port': int(out[1]), 'portguid': int(out[2], 16), 'dest_name': f'{out[3]}_{out[4]}'}
    return None


def switch_name_guid(lines):
    switch_name_guid = {}
    for l in lines.split('\n'):
        stats = parse_switch_line(l)
        if stats:
            switch_name_guid[stats['switch_name']] = stats['switch_guid']
    return switch_name_guid


def gen_routing_tables(text):
    cur_switch_guid = None
    route_table = {}
    for l in text.split('\n'):
        stats = parse_switch_line(l)
        if stats:
            #cur_switch_guid = stats['switch_guid']
            cur_switch_guid = stats['switch_name']  # Joe demands a name
            route_table[cur_switch_guid] = {'routes': {}}
            continue

        # try to parse route
        regex = parse_route_line(l)
        if regex:
            route_table[cur_switch_guid]['routes'][regex['dest_name']
                                                   ] = regex['out_port']
            continue
    return route_table


def parse_ibnetdiscover_ports(text):
    """Parse "ibnetdiscover -p" to get a list of links. The dictionary keys need to be updated to correctly tag LIDs, ports etc."""
    parsed = re.findall(
        "(\w+)\s+(\d+)\s+(\d+) (\w+) (\w+) (\w+) - (\w+)\s+(\d+)\s+(\d+) (\w+) \( '(.*)' - '(.*)' \)", text)
    out = []
    if len(parsed) > 0:
        keys = ('source_type', 'unk', 'unk2', 'source_guid', 'links', 'speed_class',
                'dest_type', 'unk3', 'unk4', 'dest_guid', 'source_name', 'dest_name')
        for vals in parsed:
            out.append(dict(zip(keys, vals)))
    return out


def parse_ibnetdiscover_endpoint_from_block_gen(block):
    keys = ('port', 'dest_guid', 'dest_port', 'dest_name', 'lid', 'line_speed')
    parsed = re.findall(
        '\[(\d+)\]\s+"[SH]-(.*)"\[(\d+)\].*# "(.*)" lid (\d+) (.*)', block)
    if parsed:
        for line in parsed:
            yield dict(zip(keys, line))


def parse_switch_block(block):
    """Parse a block."""
    try:
        switch_guid = re.findall("switchguid=(\w+)\(.*\)", block)[0]
    except:
        return None
    d = {}
    for parsed in parse_ibnetdiscover_endpoint_from_block_gen(block):
        d[parsed['port']] = {
            'destination': parsed['dest_guid'], 'inport': parsed['dest_port']}

    return {switch_guid: {'outports': d}}


def gen_switch_links(text):
    """Create a dictionary of switches"""
    d = {}
    for block in text.split('\n\n'):
        switch = parse_switch_block(block)
        if switch:
            key = list(switch.keys())[0]
            d[key] = switch[key]
    return d


def dict_merge(dct, merge_dct, add_keys=True):
    '''Merges two dictionaries into'''
    # https://gist.github.com/angstwad/bf22d1822c38a92ec0a9#gistcomment-1986197
    dct = dct.copy()
    if not add_keys:
        merge_dct = {
            k: merge_dct[k]
            for k in set(dct).intersection(set(merge_dct))
        }

    for k, v in merge_dct.items():
        if (k in dct and isinstance(dct[k], dict)
                and isinstance(merge_dct[k], collections.Mapping)):
            dct[k] = dict_merge(dct[k], merge_dct[k], add_keys=add_keys)
        else:
            dct[k] = merge_dct[k]

    return dct


def print_dict(d):
    """Print a formatted dictionary to standard out"""
    print(json.dumps(d, indent=2, sort_keys=True))


if __name__ == "__main__":
    args = parse_args()
    out_dict = {}

    if args.dump_fts:
        dump_fts_text = read_file(args.dump_fts)
    if args.ibnetdiscover:
        ibnetdiscover_text = read_file(args.ibnetdiscover)

    if args.routing_tables or args.all:
        if not args.dump_fts:
            raise Exception(
                'set "--dump_fts" to a file containing the output of "dump_fts"')
        out_dict['switches'] = gen_routing_tables(dump_fts_text)
    if args.switch_links or args.all:
        if not args.ibnetdiscover:
            raise Exception(
                'set "--ibnetdiscover" to a file containing the output of "ibnetdiscover"')
        out_dict['switch_links'] = gen_switch_links(ibnetdiscover_text)

    print_dict(out_dict)
