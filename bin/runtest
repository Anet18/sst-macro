#! /usr/bin/env python

import sys
import signal
import time
import os
import commands
import subprocess

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

verbose = 0
debugger = None
try: verbose = int(os.environ["VERBOSE"])
except: pass
try: debugger = os.environ["DEBUGGER"]
except: pass
timeout = int(sys.argv[1])
outputFile = sys.argv[2]
exe = sys.argv[3]
args = " ".join(map(lambda x: '"%s"' % x, sys.argv[4:]))

signalBitmask = (1<<7)-1
rcBitmask = (1<<15)-1


def handleTerminate(sig, frame):
    sys.exit(0)

def runexe(exe, args, outputFile):
    errorFile = "%s.ERROR" % outputFile
    cmd = "%s %s 1>> %s 2>> %s" % (exe, args, outputFile, errorFile)
    out=open(outputFile,"w")
    err=open(errorFile,"w")
    if verbose:
        print cmd
    try:
        rc = subprocess.call(sys.argv[3:], stdout=out, stderr=err)
        out.close()
        err.close()
        text = open(outputFile).read()
        str_arr = []
        for line in text.splitlines():
          line = line.strip()
          if "WARNING:" in line:
            pass
          elif "Maximum bad" in line:
            pass
          elif line:
            str_arr.append(line)
        str_arr.append("")
        open(outputFile,"w").write("\n".join(str_arr))
    except:
        sys.exit(111)
    if rc < 0:
        sig = abs(rc)
        print bcolors.FAIL, "TERMINATED WITH SIGNAL %d: %s" % (sig, outputFile), bcolors.ENDC
        sys.exit(111)
    else:
        sys.exit(rc)

if debugger:
    debugargs = "r " + args
    print "DEBUG ARGS: ", debugargs
    folder, script = os.path.split(exe)
    actualExe = ".libs/%s" % script
    actualExe = os.path.join(folder, actualExe)
    cmd = "%s %s" % (debugger, actualExe)
    os.system(cmd)
    sys.exit(0)

#fork off a child process to run the test
try: exepid = os.fork()
except OSError: 
  print bcolors.FAIL, "TEST FORK FAILED"
  sys.exit(111)
if exepid == 0:
    runexe(exe, args, outputFile)
    sys.exit()

try: waiterpid = os.fork()
except OSError: 
  print bcolors.FAIL, "TEST FORK FAILED"
  sys.exit(111)
if waiterpid == 0:
    signal.signal(signal.SIGTERM, handleTerminate)
    time.sleep(timeout)
    try: os.kill(exepid, signal.SIGKILL)
    except OSError: pass
else:
    pid, bits = os.waitpid(exepid,0)
    os.kill(waiterpid, signal.SIGTERM)
    rc = (bits & rcBitmask) >> 8
    sig = bits & signalBitmask
    if sig:
        if sig == signal.SIGKILL:
            print bcolors.FAIL, "TIMEOUT: %s" % outputFile, bcolors.ENDC
        try: os.kill(exepid, signal.SIGTERM)
        except OSError: pass
    elif rc == 0:
        print bcolors.OKGREEN, "PASSED: %s" % outputFile, bcolors.ENDC
    elif rc == 111:
        pass #already printed stuff
    else:
        print bcolors.FAIL, "ERROR/EXCEPTION: %s" % outputFile, bcolors.ENDC




